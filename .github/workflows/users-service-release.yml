name: Users Service Release

on:
  push:
    branches: [ main ]
    paths:
      - 'services/applications/users-service/**'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  SERVICE_NAME: users-service
  SERVICE_PATH: services/applications/users-service

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      issues: write
      pull-requests: write
    outputs:
      new-release-published: ${{ steps.semantic.outputs.new-release-published }}
      new-release-version: ${{ steps.semantic.outputs.new-release-version }}
      new-release-git-tag: ${{ steps.semantic.outputs.new-release-git-tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release
          npm install -g @semantic-release/changelog
          npm install -g @semantic-release/git
          npm install -g @semantic-release/github

      - name: Run semantic-release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        working-directory: ${{ env.SERVICE_PATH }}
        run: |
          npx semantic-release

  build-and-push:
    needs: release
    if: needs.release.outputs.new-release-published == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.release.outputs.new-release-git-tag }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.SERVICE_NAME }}
          tags: |
            type=raw,value=${{ needs.release.outputs.new-release-version }}
            type=raw,value=latest

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.SERVICE_PATH }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  update-gitops:
    needs: [release, build-and-push]
    if: needs.release.outputs.new-release-published == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create update branch
        run: |
          VERSION="${{ needs.release.outputs.new-release-version }}"
          BRANCH_NAME="gitops/update-${{ env.SERVICE_NAME }}-v${VERSION}"
          git checkout -b "$BRANCH_NAME"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Update image tags in GitOps manifests
        run: |
          VERSION="${{ needs.release.outputs.new-release-version }}"
          NEW_IMAGE="${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.SERVICE_NAME }}:${VERSION}"
          
          echo "Updating manifests with new image: $NEW_IMAGE"
          
          # Update kustomization files and deployments
          find services/manifests -name "*.yaml" -o -name "*.yml" | while read file; do
            if grep -q "${{ env.SERVICE_NAME }}" "$file" && grep -q "image:" "$file"; then
              echo "Updating $file"
              # Update image references for users-service
              sed -i "s|image: .*${{ env.SERVICE_NAME }}:.*|image: $NEW_IMAGE|g" "$file"
              sed -i "s|image: .*${{ env.SERVICE_NAME }}@.*|image: $NEW_IMAGE|g" "$file"
            fi
          done

      - name: Commit and push GitOps changes
        run: |
          VERSION="${{ needs.release.outputs.new-release-version }}"
          
          if git diff --quiet; then
            echo "No GitOps changes to commit"
            echo "HAS_CHANGES=false" >> $GITHUB_ENV
            exit 0
          fi
          
          echo "HAS_CHANGES=true" >> $GITHUB_ENV
          
          git add services/manifests/
          git commit -m "ci(gitops): update ${{ env.SERVICE_NAME }} to v${VERSION}

          - Updated container image to v${VERSION}
          - Release: ${{ needs.release.outputs.new-release-git-tag }}
          - Automated GitOps update via semantic-release"
          
          git push origin "$BRANCH_NAME"

      - name: Create Pull Request
        if: env.HAS_CHANGES == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const version = "${{ needs.release.outputs.new-release-version }}";
            const serviceName = "${{ env.SERVICE_NAME }}";
            const branchName = process.env.BRANCH_NAME;
            
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ðŸš€ Deploy ${serviceName} v${version}`,
              head: branchName,
              base: 'main',
              body: `## ðŸš€ Automated Deployment Update

            ### Release Information
            - **Service**: ${serviceName}
            - **Version**: v${version}
            - **Release Tag**: ${{ needs.release.outputs.new-release-git-tag }}
            - **Container Image**: \`${{ env.REGISTRY }}/${{ github.repository_owner }}/${serviceName}:${version}\`

            ### Changes
            - Updated container image tags in GitOps manifests
            - Generated from semantic-release workflow

            ### Deployment Notes
            - This PR updates the GitOps manifests with the new container image
            - Once merged, ArgoCD will automatically deploy the new version
            - Review the changes and merge when ready to deploy

            ### Changelog
            View the full changelog in the [release notes](${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ needs.release.outputs.new-release-git-tag }})

            ---
            *This PR was created automatically by the semantic-release workflow*`,
              draft: false
            });
            
            console.log(`Created PR #${pr.number}: ${pr.html_url}`);
            
            // Add labels
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              labels: ['gitops', 'deployment', 'automated']
            });

      - name: Create deployment summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          # ðŸš€ Users Service Deployment Complete

          ## Release Information
          - **Version**: ${{ needs.release.outputs.new-release-version }}
          - **Tag**: ${{ needs.release.outputs.new-release-git-tag }}
          - **Image**: \`${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.SERVICE_NAME }}:${{ needs.release.outputs.new-release-version }}\`

          ## Next Steps
          - GitOps manifests have been updated automatically
          - ArgoCD will detect changes and deploy to your cluster
          - Monitor deployment status in your ArgoCD dashboard

          ## Changelog
          View the full changelog at: [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/${{ env.SERVICE_PATH }}/CHANGELOG.md)
          EOF