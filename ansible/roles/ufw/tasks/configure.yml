- name: Set default UFW policies
  ufw:
    direction: "{{ item.direction }}"
    policy: "{{ item.policy }}"
  loop:
    - { direction: "incoming", policy: "deny" }
    - { direction: "outgoing", policy: "allow" }
    - { direction: "routed", policy: "deny" }

- name: Allow SSH and external access
  ufw:
    rule: allow
    port: "{{ item.port }}"
    proto: "{{ item.proto }}"
    comment: "{{ item.comment }}"
  loop:
    - { port: "22", proto: "tcp", comment: "SSH Access" }
    - { port: "6443", proto: "tcp", comment: "Kubernetes API Server" }

- name: Allow RKE2 inbound network rules
  ufw:
    rule: allow
    port: "{{ item.port }}"
    proto: "{{ item.proto }}"
    comment: "{{ item.comment }}"
  loop:
    - { port: "6443", proto: "tcp", comment: "Kubernetes API Server" }
    - { port: "9345", proto: "tcp", comment: "RKE2 Supervisor API" }
    - { port: "10250", proto: "tcp", comment: "Kubelet Metrics" }
    - { port: "2379:2380", proto: "tcp", comment: "etcd HA Cluster" }
    - { port: "2381", proto: "tcp", comment: "etcd Metrics Port" }
    - {
        port: "30000:32767",
        proto: "tcp",
        comment: "Kubernetes NodePort Range",
      }

- name: Allow Cilium inbound network rules (non-ICMP)
  ufw:
    rule: allow
    port: "{{ item.port }}"
    proto: "{{ item.proto }}"
    comment: "{{ item.comment }}"
  loop:
    - { port: "4240", proto: "tcp", comment: "Cilium CNI Health Checks" }
    - { port: "8472", proto: "udp", comment: "Cilium CNI with VXLAN" }
    - { port: "51871", proto: "udp", comment: "Cilium CNI with WireGuard" }

- name: Allow Cilium ICMP Health Checks via iptables
  command: iptables -I INPUT -p icmp --icmp-type 8 -j ACCEPT

- name: Allow Internal Kubernetes Network Subnets
  ufw:
    rule: allow
    from: "{{ item.subnet }}"
    comment: "{{ item.comment }}"
  loop:
    - { subnet: "10.42.0.0/16", comment: "Allow Pods subnet" }
    - { subnet: "10.43.0.0/16", comment: "Allow Services subnet" }

- name: Reload UFW
  command: ufw reload
  changed_when: false

- name: Verify UFW Status
  command: ufw status verbose
  register: ufw_status
  changed_when: false

- debug:
    msg: "{{ ufw_status.stdout_lines }}"
